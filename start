#!/bin/bash
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#.. sources
#.  source golbal
source /usr/local/bin/caps_settings/labpath
source /usr/local/bin/caps_settings/config

#.  make startup variable assign cheatsheet
#? or Don't?? . $LABPATH/.func/assign.sh $EXP

#.. assignments

#CAPACITY=6 #. hard code 6 PLATE_CNT per scanner
#!! WTF, need to redeclare CAPACITY again during saveit()
SFILE="$LABPATH/exp/last.exp" #: to initialize GUI
FUNCDIR=$LABPATH/.func


cd "${BASH_SOURCE%/*}"
gitlog_init=`git log --pretty=format:'%h' -n 1`

### DECLARE VARIABLES
##. Color codes for UI
#. Reset
NC='\033[0m'       # Text Reset

#. Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
LtBlue='\033[1;34m'
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

#. Underline
UCyan='\033[4;36m'

#. Bold Colors
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

#... random..
IYellow='\033[0;93m'
On_IYellow='\033[47m'
BPurple='\033[1;35m'
UBlack='\033[4;30m'

On_IBlack='\033[0;100m'

Inv='\e[7m'

BIWhite='\033[1;95m'
BIPurple='\033[1;95m'

Italic='\033[3m'
##. Arrays
declare -a args
declare -a blurbs
declare -a subs
declare -a keys
declare -a cols
declare -a subblurbs
declare -a func
declare -a opts
declare -a optslist
declare -a subvals #: the value to store in the associated EXP ARG, if different than user input
declare -a trueopts
# declare -a lprog

keys=(e s i r x l a f o c d)
mkeys=(I T Z R F S Q)

opts+=("*/...")
opts+=("C/1..9")
opts+=("I/minutes")
opts+=("C/1/2/3/6")
opts+=("T")
opts+=("T")
opts+=("*/...")
opts+=("*/...")
opts+=("*/...")
opts+=("*/...")
opts+=("T")

optslist+=("")
optslist+=("1.to.9")
optslist+=("")
optslist+=("100.DPI/200.DPI/300.DPI/600.DPI")
optslist+=("")
optslist+=("")
optslist+=("")
optslist+=("")
optslist+=("")
optslist+=("")
optslist+=("")

subvals+=("")
subvals+=("C/^")
subvals+=("")
subvals+=("C/100/200/300/600")
subvals+=("")
subvals+=("")
subvals+=("")
subvals+=("")
subvals+=("")
subvals+=("")
subvals+=("")

trueopts+=("")
trueopts+=("C/123456789")
trueopts+=("I/1234567890")
trueopts+=("C/1/2/3/6")
trueopts+=("")
trueopts+=("")
trueopts+=("")
trueopts+=("")
trueopts+=("")
trueopts+=("")
trueopts+=("")

args+=("EXP")
args+=("SCANNERS")
args+=("INT")
args+=("RES")
args+=("XFER")
args+=("USELIGHTS")
args+=("SPECIES")
args+=("FOODS")
args+=("OTHER")
args+=("SYSTEM")
args+=("DIAGNOSTICS")

blurbs+=("Exp Name")
blurbs+=("Scanner Count")
blurbs+=("Scan Interval Time")
blurbs+=("Scan resolution")
blurbs+=("* server file transfer")
blurbs+=("* use lights")
blurbs+=("test animals")
blurbs+=("food sources")
blurbs+=("note other setup")
blurbs+=("Computer system name")
blurbs+=("* Diagnostics")

#: menu blurbs
mblurbs+=("Install Services")
mblurbs+=("Test NeoPixels")
mblurbs+=("STOP experiment")
mblurbs+=("Make Report")
mblurbs+=("LOAD from file")
mblurbs+=("SAVE program")
mblurbs+=("QUIT")

#: subsections
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_exp")
subs+=("_sys")
subs+=("_sys")
# subs+=("_menu")
# subs+=("_menu")

subblurbs+=("${Inv}_____Experiment Parameters_____${NC} [${Red} WARNING${NC} | ${LtBlue}LAST EXP${NC} | ${Green}new value${NC} ]")
subblurbs+=("${On_IBlack}________ System Setup__________${NC}")
subblurbs+=("${On_IBlack}___________Plate Setup__________${NC}")

##. flow booleans
stay_TF=true


#=> tips from https://www.youtube.com/watch?v=jeq161yD8tk

sfile(){
	options=($(find $LABPATH/exp/ -maxdepth 2 -iname '*.exp' -print0|xargs -0 ))
	echo
	echo "Load prior EXP"
	select opt in `basename "${options[@]%.*}"` "CANCEL";
	do
		if ((REPLY == 1 + ${#options[@]}))
		then
			return
		elif (( REPLY <= ${#options[@]}))
		then
			SFILE=$opt
			#display=$(basename $opt)
			echo $SFILE
			#echo "File selected $display"
			load_parms
			return
		else
			echo "Not valid"
		fi
	done
}


insert(){
		#:- example insert call: insert optslist $(( ink )) "1..GPIO/2..[broken]" #C/-/=/1..9
    local i
    [[ $1 = -h ]] && { echo "$h" >/dev/stderr; return 1; }
    declare -n __arr__=$1   # reference to the array variable
    i=$2                    # index to insert at
    el="$3"                 # element to insert
    # handle errors
    [[ ! "$i" =~ ^[0-9]+$ ]] && { echo "E: insert: index must be a valid integer" >/dev/stderr; return 1; }

    #? the following line throws errors sporatically, when ingesting special characters in the 0th index
    # (( "$1" < 0 )) && { echo "E: insert: index can not be negative" >/dev/stderr; return 1; }
    # Now insert $el at $i
    __arr__=("${__arr__[@]:0:$i}" "$el" "${__arr__[@]:$i}")
}

spacer (){ #: helps with UI building
	echo
	echo -e "${subblurbs[$isub]}"

}

opts_list (){
	local -a optsreturn=(${optslist[$i]//// })
	echo ${optsreturn[*]}
}

eatinput (){
	# echo eatinput function
	local -a thisopt
	thisopt=(${trueopts[$i]//// }) #: store options into array, incl type marker
	local op=${opts[$i]:0:1} #: the type marker, kind of hotkey, choice, toggle, etc
	local limit=1
	local -a uinput
	local secret=1
	local subz=0
	local q uvalue k
	# echo "options for this argument thisopt = ( ${thisopt[@]} )" #-- TRACER
	case $op in
		"C")			#: CHOICE
			IFS="/"
			subz=1
			set -- "${subvals[$i]}"
			local -a svals=($*) #: setting svals array for substituting in final args
			unset IFS
			# read -p "pause"
			;;
		"T")			#: TOGGLE
			a=a

			;;
		"I")			#: TOGGLE
			secret=0
			;;
		"*")
			limit=30 #: arbitray high limit for string entry
			secret=0
			;;
		*)
			;;
	esac

	while [ ${#uinput[@]} -lt $limit ]
	do
		#echo while limit loop #-- TRACER
		if [[ $secret -eq 1 ]] #: single key trigger with readout substitution; suppress user key printout
		then
			#echo secret loop, read single key #-- TRACER
			read -s -n 1 k
			if [[ $k = "" ]]
			then
				echo -e ${Yellow}${Italic}no change${NC}
				xcolor=${cols[$i]}
				return
			fi
			#: VALID KEY SECTION ----------------------
			for q in "${!thisopt[@]}"
			do
				if [[ ${thisopt[$q]} = *$k* ]] #: if key occurs in the valid set
				then
					uvalue=${svals[$q]} #: user; index matching key stroke
					if [[ ${uvalue: -1} = ^ ]] #: add the key pressed to the final ARG string (exp-groupX)
					then
						uvalue=${uvalue::-1}$k
					fi
					echo $uvalue
					limit=-1
				else
					#reject input, don't leave
					a=a
				fi
			done
		else #: not a single key trigger
			local former='"'${!args[$i]}'"' #: quotes must be added to string in case of spaces
			# xcolor=${cols[$i]}
			read ${args[$i]}
			limit=-1
			#user sent empty string, replace with former
			if [[ ${!args[$i]} = "" && ${args[$i]} != $former ]]
			then
				eval ${args[$i]}=$former
				printf "%34s" " "
				echo -e "${Yellow}${Italic}no change${NC}"; sleep 1
			else
				xcolor=${Green}
			fi
			storelongest
			return
		fi #: end of IF secret

		##: loop through single key inputs, add to cumulative array
		#? will we need this? uncertain

		# if [[ ${opt[*]} =~ $k ]]
		# then
		# 	uinput+=(k)
		# else
		# 	return
		# 	a=a
		# fi
	done #: character input limit hit, or enter key
	if [[ $subz -eq 1 ]] #- temporary
	then
		eval "${args[$i]}"="$uvalue" #: set the EXP variables
	fi
	if [[ ${args[$i]} = $uvalue ]]
	then
		xcolor=${cols[$i]}
	else
		xcolor=${Green}
	fi
	storelongest
	# echo "limit reached" #-- TRACER
}

diagnostics(){
	a=a
}

testlights(){
	if [[ $CONTROLLER == "gpio" ]]
	then
		echo -e "${BYellow}"
		printf "%30s" "Test all / single"
		echo -e "${NC}"
		printf "%32s"  "Chose [X/0/1..9/+] >"
		read -n 1 zkey
		case $zkey in

		"X")			#: zero out crontabs
			return
		;;

		[0-9])			#: load from file
			echo
			echo -e "${Red}   Watch the lights!${NC}"
			echo
			#sudo python $SP/util/gpio-test.py -c $PLATE_CNT -i $zkey
			echo `sudo -E $LABPATH/util/gpio-test.sh $PLATE_CNT $zkey`
			echo "paused for error readout. <enter> to clear lights"
			read
			clearpix
		;;
		"+")			#: SAVE
			for arg in ${args[@]}
			do
				arg=${!arg}
				if [[ ${#arg} -lt 1 ]]
				then
					echo -e ${Red}
					read -n 1 -p " Cannot save file with any blanks fields..."
					main
				fi
			done
			saveit
			;;
		*)
			;;
		esac
	else
		echo need to write code for this
		read
	fi
}

clearpix(){
	echo `sudo $LABPATH/util/clear.sh $PLATE_CNT`
}

zero(){
	echo -e "${Yellow}"
	printf "%32s" "zero out crontabs"
	echo -e "${Red}"
	printf "%32s" "[n]..CANCEL <"
	echo -e
	printf "%32s"  "[y]..Stop Exp <"
	echo -e
	printf "%32s"  "[r]..Stop and Report <"
	echo -e "${NC}"
	printf "%32s"  "Chose [n/y/r] >"
	read -n 1 zkey
	if [[ $zkey = "n" ]]
	then
		return
	fi
	if [[ $zkey = "y" ]]
	then
		echo `sudo crontab -r`
		clearpix
	fi
	if [[ $zkey = "r" ]]
	then
		echo `sudo crontab -r`
		clearpix
		echo make report
		report
		read
	fi

}

report (){
	#! need to inlcude scanner resolution setting for FFMPEG commands in movie.sh
	echo report...
	now=$(date)
	source $LABPATH/exp/$EXP/$EXP.exp

	echo "copy files to Repeller for Segment"
	read -n 1 zkey
	if [[ "$zkey" != "n" ]]
	then
		ssh caps@129.101.130.90 'cd ~/lab/movie; bash -s' < util/copyforseg.sh $EXP
	fi

	echo "moviejob on phil - 'n' to skip"
	read -n 1
	if [[ "$zkey" != "n" ]]
	then
		echo "rename files for FFMPEG batch"
		ssh caps@129.101.130.90 'cd ~/lab/movie/$EXP; bash -s' < util/prepmovie.sh
		MOVIEJOB=$LABPATH/exp/$EXP/moviejob
		echo $now > $MOVIEJOB
		#. talk to phil
		#? is -A necessary? "Enables forwarding of the authentication agent connection."
		rsync $MOVIEJOB caps@129.101.130.90:~/lab/movie/$EXP.job
		# example: ssh -A caps@129.101.130.90 'cd ~/lab/movie; bash -s' < movie.sh test 1 3.4.4
		echo "start movie------------------------------------------------------------------------"
		ssh caps@129.101.130.90 'cd ~/lab/movie; bash -s' < util/movie.sh $EXP $SCANNERS $release
		echo "movie finished: key to continue"
		read -n 1
	fi


	#ffmpeg code to run on client
	#ffmpeg -i halflight_pink_1b.mp4  -vf "transpose=1" rotate.mp4
	#ffmpeg -r 20 -f image2 -s 1700x2354 -i %04d.200318_halflight_pink_1b.png -vcodec libx264 -crf 25 -pix_fmt yuv420p test2.mp4

}

movieservice(){
	echo "# programatic crontab file generated for CAPS automatic FFMPEG assembely"> $MOVIE_XTABFILE
	echo -n "#" >> $MOVIE_XTABFILE
	printf '.%.0s' {1..34} >> $MOVIE_XTABFILE
	echo >> $MOVIE_XTABFILE
	echo "sp=$LABPATH" >> $MOVIE_XTABFILE
	echo -e "logfile=/home/caps/lab/movie/LOG \n" >> $MOVIE_XTABFILE
	printf "*/$INT * * * * " >> $MOVIE_XTABFILE
	printf "\$sp/util/batchmovie.sh 2>&1 | tee -a \$logfile; " >> $MOVIE_XTABFILE
	echo >> $MOVIE_XTABFILE ###- blank line needed before EOF
	echo movieservice- any key to install on Phil
	read -n 1
	rsync $MOVIE_XTABFILE caps@129.101.130.90:$MOVIE_XTABFILE
	ssh caps@129.101.130.90 'crontab /usr/local/bin/cronscan/.func/movie_xtab'
	return
}

segmentservice(){
	echo segmentservice
	read
	a=a
	return
}


installservice(){
	[[ $1 == "m" ]] && movieservice || segmentservice
}

menukeys(){
	case $key in
	"I")			#: zero out crontabs
		echo -e -n ${Red}
		printf "%32s" "[s]..segmenter  >"
		echo
		printf "%32s" "[m]..moviemaker >"
		echo
		printf "%32s" "[q]..cancel >"
		read -n 1 key2
		echo -e "${NC}"
		if [[ $key2 = "q" ]]
		then
			return
		else
			installservice $key2
		fi
	;;
	"T")			#: zero out crontabs
		testlights
	;;

	"Z")			#: zero out crontabs
		zero
	;;

	"R")			#: zero out crontabs
		report
	;;

	"F")			#: load from file
		sfile
	;;
	"S")			#: SAVE
		for arg in ${args[@]}
		do
			arg=${!arg}
			if [[ ${#arg} -lt 1 ]]
			then
				echo -e ${Red}
				read -n 1 -p " Cannot save file with any blanks fields..."
				main
			fi
		done
		saveit
		;;
	"Q")			#: QUIT
		echo -e ${Red}
		printf "%32s" "q again to quit >"
		read -n 1 key
		echo -e "${NC}"
		if [[ $key = "q" ]]
		then
			echo -e "Adios Bye-Bye\n"
			exit
		else
			return
		fi
		;;
	*)
		;;
	esac

}

eatkeys(){ #: digest user key inputs
	#echo "(------eatkeys function-----)"; #-- TRACER
	#echo key: $key #-- TRACER
	dindex=0
	if [[ $key = "" ]] #enter
	then
		echo no change
		sleep 1
		return
	fi
	#: routine for toggles
	if [[ ${blurbs[$i]:0:1} = "*" ]] #: if first character is *, this is a toggle
	# if [[ ${opts[$i]} = "[off/on]" ]]
	# if [[ ${types[$i]} = "tog" ]]
	then
		if [[ ${!args[$i]} = "on" ]]
		then
			eval ${args[$i]}="off"
		else
			eval ${args[$i]}="on"
		fi
		cols[$i]=${Green}
		if [[ $key = ${keys[6]} ]] #: lights have toggled
		then
			update ${keys[6]}
		fi
		storelongest #: formating proc to space the display based on longest string
		return
	fi # end toggles
	size=$((${#opts[$i]}+2))
	if [[ ${opts[$i]:0:1} = "C" ]]
	then
		((i--)) #!! is a dumb hack to fix the optslist for the plats/lighting
		optsbuff=(${optslist[$i]//// })
		#:: printf "i = $i" <-- tracing the hack
		for str in "${optsbuff[@]}"
		do
			echo -n -e ${Red}
			printf "%$((34))s" "$str <"
			echo
		done
		echo -n -e ${NC}
		((i++)) #!! part of the dumb hack
	fi
	printf "%$((34-$size))s" "${blurbs[$i]} ["
	echo -e "${Cyan}${Italic}${opts[$i]:2}${NC}] >\c"
	eatinput
	cols[$i]=$xcolor
	if [[ ${keys[$i]} = "p" ]]
	then
		program_lights
	fi
	if [[ ${keys[$i]} = "P" ]]
	then
		i=0
		lj=0
		for argi in "${keys[@]}"
		do
			if [[ $argi = "p" ]]
			then
				program_lights
			fi
			((i++))
		done
	fi
	update $key #: run update to check for changes to the arrays (eg scanner count change)
} #. end eatkeys()

program_lights(){
	# echo "(----------program_lights ()---------)" #-- TRACER
	if [[ firstrun -ne 0 ]] #: escape prog
	then
		local plate=${!args[(($i))]} #: find the value of each plate arg
		case $plate in

		"neg-ctrl")			#: CHOICE
			val=OFF
			;;
		"pos-ctrl")			#: TOGGLE
			val=ON
			;;
		*)
			#! previous code edit
			# lpI=$((${#args[@]}-1))
			# val=${!args[$lpI]}
			IFS='.' read -ra vals <<< $plate

			val=${vals[1]}
			;;
		esac
		eval ${largs[$lj]}=$val #: sets the new value for the plate light
		((lj++))
	fi
}

init_colors(){
	##: use loop to setup initial colors
	for ((i=0;i<${#keys[@]};i++))
	do
		cols+=($LtBlue)
	done
	cols[0]=$Red
}

lights_on(){
	if [[ ${!args[6]} = "on" ]]
	then
		ink=${#args[@]}
		probpos=$ink
		((ink++))
		((ink++)) #- iterate once for each arg entered in thi lights sub group

		insert args $(( ink )) "CONTROLLER"
		insert keys $(( ink )) C
		insert blurbs $(( ink )) "Light Controller"
		insert subs $(( ink )) "_light"
		insert opts $(( ink )) "C/1/2" #C/-/=/1..9
		insert optslist $(( ink )) "[1]..GPIO/[2]..[broken]" #C/-/=/1..9
		insert cols $(( ink )) "$LtBlue"
		insert subvals $(( ink )) "C/gpio/arduino"
		insert trueopts $(( ink )) "C/1/2"
		insert subblurbs 3 "${BCyan}${Inv}____Neopixel Light Program_____${NC}"

		((ink++))
		insert args $(( ink )) "PROGRAM"
		insert keys $(( ink )) P
		insert blurbs $(( ink )) "Light Program"
		insert subs $(( ink )) "_light"
		insert opts $(( ink )) "C/1..3" #C/-/=/1..9
		insert optslist $(( ink )) "[1]..steady/[2]..ran-on/[3]..ran-tog" #C/-/=/1..9
		insert cols $(( ink )) "$LtBlue"
		insert subvals $(( ink )) "C/steady/random.on/random.toggle"
		insert trueopts $(( ink )) "C/1/2/3"
	fi
}



load_parms(){
	##: DISK OPS
	#. load last experiment
	source $LABPATH/release
	source $SFILE #: in one commad, loads all variables
	SYSTEM=$HOSTNAME
	EXP=$(echo $EXP|tr -d '\n') #? what do these lines do??
	INT=$(echo $INT|tr -d '\n')
	remember_scanners=0
}

update(){
	#echo "(------update function-----)" #-- TRACER
	#echo parm: $1 #-- TRACER
	if [[ remember_scanners -ne SCANNERS && $1 = ${keys[1]} ]] #: number of scanners has changed

	#: delete all args related to old scanner count
	then

		local ix j ins ini inj

		#!! configure baed on how many special args are added after system setup catagory
		local ins=11 #: insert point in arrays (index padding)
		local xindex=$((remember_scanners*CAPACITY+remember_scanners))

		#: hunt down plate entries and remove them
		for ((ix=((${#keys[@]}-1));ix>0;ix--)) #((ix=0;ix<lKeys;ix++))
		do
			if [[ ${subs[$ix]} = "_plate" ]]
			then
				unset args[$ix]
				unset blurbs[$ix]
				unset keys[$ix]
				unset subs[$ix]
				unset opts[$ix]
				unset optslist[$ix]
				unset trueopts[$ix]
				unset cols[$ix]
				unset subvals[$ix]
			fi
			unset largs[@]
		done
		remember_scanners=$SCANNERS #: reset scanner count memory
		ix=1; #: reset this counter
		#: insert args based on startup settings, or scanner count updates......................
		for ((ix=1;ix<$(( SCANNERS+1 ));ix++)) #: add features related to scanner/multiple
		do
			ini=$((ins+((ix-1))*2+((ix-1))*CAPACITY))
			insert keys $(( ini )) k
			insert args $(( ini )) SCANNER${ix}_ID
			insert blurbs $(( ini )) "Scanner${ix} ID"
			insert subs $(( ini )) "_plate"
			insert opts $(( ini )) "*"
			insert optslist $(( ini )) ""
			insert cols $(( ini )) "$LtBlue"
			insert trueopts $(( ini )) ""
			insert subvals $(( ini )) ""

			((ini++))
			insert keys $(( ini )) t
			insert args $(( ini )) TEMPLATE${ix}_ID
			insert blurbs $(( ini )) "Template${ix} ID"
			insert subs $(( ini )) "_plate"
			insert opts $(( ini )) "*"
			insert optslist $(( ini )) ""
			insert cols $(( ini )) "$LtBlue"
			insert trueopts $(( ini )) ""
			insert subvals $(( ini )) ""

			((ini++))
			insert keys $(( ini )) h
			insert args $(( ini )) HOOD${ix}
			insert blurbs $(( ini )) "Hood${ix}"
			insert subs $(( ini )) "_plate"
			insert opts $(( ini )) "C/0/1/2/3"
			insert optslist $(( ini )) "[0]..none/[1]..P1-P3/[2]..P4-P6/[3]..all"
			insert cols $(( ini )) "$LtBlue"
			insert trueopts $(( ini )) "C/0/1/2/3"
			insert subvals $(( ini )) "C/none/123/456/123456"



			#: plate specific
			for ((j=1;j<$(( CAPACITY+1 ));j++))
			do
				if [[ $j -eq 1 && $ix -eq 1 ]] #: first plate (numeric)
				then
					lj=0 #: light j(index) reset
					lset="L0"
				else
					lj=${#largs[@]}
					lset="L$lj"
				fi
				inj=$((ini+j))
				insert keys $(( inj )) p
				insert largs $(( lj )) "$lset"
				insert args $(( inj )) "PLATE${ix}_${j}"
				insert blurbs $(( inj )) "S${ix} Plate${j}"
				insert subs $(( inj )) "_plate"
				insert opts $(( inj )) "C/-/=/1..9"
				insert optslist $(( ini )) "[-]..neg-ctrl/[=]..pos-ctrl/1..9"
				insert cols $(( inj )) "$LtBlue"
				insert trueopts $(( inj )) "C/-/=/123456789"
				insert subvals $(( inj )) "C/neg-ctrl/pos-ctrl/group.^"
				program_lights
			done
		done
	fi

	#: insert args based on startup settings, or light feature toggle..................
	if [[ $1 = ${keys[6]} ]] #: that's the 'l' key
	then
		#: hunt down light entries and remove them
		for ((ix=((${#keys[@]}-1));ix>0;ix--)) #((ix=0;ix<lKeys;ix++))
		do
			if [[ ${subs[$ix]} = "_light" ]]
			then
				unset args[$ix]
				unset blurbs[$ix]
				unset keys[$ix]
				unset subs[$ix]
				unset opts[$ix]
				unset optslist[$ix]
				unset types[$ix]
				unset trueopts[$ix]
				unset subblurbs[3]
			fi
		done
		lights_on #: run check if lights are on
	fi
	return	# "^ ^ ^ ^ end update function ^ ^ ^ ^"
}

cronit(){
	#--announce
  echo -e "~~~~~~~~~~\n<cronit>"
	echo EXP=$EXP > $LABPATH/exp/current
	ASSIGNED=$LABPATH/.func/assigned
	source $ASSIGNED #: just made it, now load it.
	[ ! -d $TRACKDIR ] && mkdir $TRACKDIR
	#? sudo chown $USER $EP/.track
	cp $SAVEFILE $EXPFILE
	rm $SAVEFILE
	cp $EXPFILE $LOGFILE
	cp $EXPFILE $LASTFILE

	#..	make status file
	SCANS=0

	source $FUNCDIR/status.sh; update

	#:	startup the crop file
	for i in $(seq 1 $SCANNERS)
	do
		fetch=PROGRAM
		echo $fetch=${!fetch} > $TRACKDIR/s$i.crop
		fetch=SCANNER${i}_ID
		echo $fetch=${!fetch} >> $TRACKDIR/s$i.crop
		fetch=TEMPLATE${i}_ID
		echo $fetch=${!fetch} >> $TRACKDIR/s$i.crop
		fetch=HOOD${i}
		echo $fetch=${!fetch} >> $TRACKDIR/s$i.crop
		for j in $(seq 1 $CAPACITY)
		do
			fetch=PLATE${i}_${j}
			echo $fetch=${!fetch} >> $TRACKDIR/s$i.crop
		done

	done


	echo "# programatic crontab file generated for CAPS scanner control"> $XTABFILE
	echo -n "#" >> $XTABFILE
	printf '.%.0s' {1..34} >> $XTABFILE
	echo >> $XTABFILE
	for ((i=0;i<${#keys[@]};i++))
	do
		echo -n "#" >> $XTABFILE
		printf "%31s" "${blurbs[$i]}: " >> $XTABFILE
		echo ${!args[$i]} >> $XTABFILE
	done
	echo "sp=$LABPATH" >> $XTABFILE
	echo "logfile=$LOGFILE" >> $XTABFILE
	printf "*/$INT * * * * " >> $XTABFILE
	printf "\$sp/util/scan.sh $RES 2>&1 | tee -a \$logfile; " >> $XTABFILE
	echo -e "\n0  0 * * * root reboot" >> $XTABFILE
	echo >> $XTABFILE ###- blank line needed before EOF
	echo -e "\nxtab exported"
	echo -e "\ninstalling crontab..."
	echo -e "\n--scanning enabled"

	#!!!! temp disable !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	# launch first scan
	#echo -e "\nBEGIN first scan"
	#. $sp/util/scan.sh $RES 2>&1 | tee -a \$logfile

	sudo crontab $XTABFILE

	#. initialize LOG with some project info
	cp $EXPFILE $LOGFILE
	printf '=%.0s' {1..31} >> $LOGFILE
	echo -e -n "\nCrontab code: " >> $LOGFILE
	printf "*/$INT * * * * " >> $LOGFILE
	[[ $REF > 0 ]] && \
	printf "\$sp/util/scan.sh $RES 2>&1 | tee -a \$LOGFILE;\n" >> $LOGFILE
	printf '=%.0s' {1..31} >> $LOGFILE

	echo -e "\nWORKING DIRECTORY on $HOSTNAME: $EP" >> $LOGFILE

	#..	make light initilizers
	if [[ $USELIGHTS == "on" ]]
	then
		echo -e "\n--init light tracking" >> $LOGFILE
		source $SETUPSH; initlights
		#!!!
		#. $LABPATH/util/lights.sh on $EXP #!! >> $LOGFILE
	fi
	# export ep=$EP #! this is just for easy troubleshooting in terminal
	# export sp=$SP
	exit
}

saveit(){
	#: but first, the directory check...
	EP=$LABPATH/exp/$EXP
	if [ -d "$EP" ]
	then
		echo -e "\n${BRed} THIS DIRECTORY EXISTS, IT WILL BE DELETED. ARE YOU SURE? (y/n)${NC}\c"
		read -s -r -n 1 response
		response=${response,,}    # tolower
		if [[ "$response" =~ ^(yes|y)$ ]]
		then
			rm $EP/* -f
    	mkdir -p $EP
		fi
	else
    mkdir -p $EP
	fi

	#: now make the files....
	#.  make assignemnets
	. $LABPATH/.func/assign.sh $EXP

	#.	load ass in memory
	source $ASSIGNED
	#? CAPACITY=6 #! I don't know why, but this needs to be declared again. makes no sense to me
	PLATE_CNT=$((CAPACITY*SCANNERS))

	echo "working with directory $EP"
	echo "temp save: $SAVEFILE"

	#: write out $EXP.exp and last.exp record files
	echo "#exp parameters for \"$EXP\"" > $SAVEFILE
	echo release=$release >> $SAVEFILE
	echo gitlog_init=$gitlog_init >> $SAVEFILE
	echo CAPACITY=$CAPACITY >> $SAVEFILE
	echo PLATE_CNT=$PLATE_CNT >> $SAVEFILE

	#: regurgitate args
	for arg in "${args[@]}"
	do
	   echo ${arg}=\"${!arg}\" >> $SAVEFILE
	done
	if [[ $USELIGHTS == "on" ]]
	then
		for larg in "${largs[@]}"
		#. write out the L's; 10 = on, 0 = OFF
		do
			iq=${larg:1} #: eg, 'L0' = '0'
			test="${!largs[$iq]}" #: get the value at index iq
			case $test in
			  "OFF")
			    echo ${larg}=OFF >> $SAVEFILE
			    [[ $PROGRAM == "random.toggle" ]] && echo - >> $EP/tog
			    ;;

			  "ON")
		   		echo ${larg}=ON >> $SAVEFILE
		   		[[ $PROGRAM == "random.toggle" ]] && echo + >> $EP/tog
			    ;;

			  *)
		   		echo ${larg}=${!larg} >> $SAVEFILE
		   		[[ $PROGRAM == "random.toggle" ]] && echo 0 >> $EP/tog
			    ;;
			esac
		done
	else
		# unset largs
		declare -a largs
	fi

	echo
	echo -e "${BRed} install crontab and begin scanning (y/n)${NC}\c"
	read -s -r -n 1 response
	response=${response,,}    # tolower
	if [[ "$response" =~ ^(yes|y)$ ]]
	then
		echo -e  "\n${BRed}${Inv} Make sure scanners are connected and powered. ${NC}"
		echo -e -n "\n Scan will be triggered immediately. Press enter to proceed"
		read -s -r -n 1 response
		cronit
	else
		return
	fi
}

storelongest(){
	local ix
	local buff=5
	longest=0
	for ((ix=0;ix<${#args[@]};ix++))
	do
		temp=${!args[$ix]}
		comp=${#temp}
		if [[ $comp -gt $longest && ${subs[$ix]} = "_plate" ]]
		then
			longest=$comp
		fi
	done
	margin=$(($buff+$longest))
}

set_all(){
	for ((i=0;i<${#keys[@]};i++))
	do
		if [[ ${blurbs[$i]:0:1} != "*" ]]
		then
			eatkeys
		fi
		if [[ $i -eq 1 ]]
		then
			update ${keys[1]}
		fi
		if [[ $i -eq 6 ]]
		then
			update ${keys[6]}
		fi
	done
}

findi(){
	for q in "${!my_array[@]}"
	do
	   if [[ "${my_array[$q]}" = "${1}" ]]
	   then
	       return
	   fi
	done
}

#!! maybe it worked once? CHECK THE GIT REPORT SEE if it works


#--announce


main(){
 #: main looop --------------------------------------------
 # echo "(------MAIN MAIN MAIN -----)"; sleep 1 #-- TRACER
((firstrun++))
if [[ $firstrun -eq 1 ]] #:this catches the LIGHTS on variable for the first UI build
then
	lights_on
fi
while [ "$stay_TF" = "true" ]

		#: BUILD UI MENU-----------------------------------------
	do
		clear -x #!! temp disable for TRACER
		echo -e "${BPurple}"
		printf " CREATE NEW CRONTAB EXPERIMENT"
		echo -e "\n ||--r:$release git:$gitlog--||"
		echo -e "${Green} >> Settings loaded from ${BGreen}$(basename $SFILE)${NC}"
		echo
		isub=0
		dindex=0
		for ((i=0;i<${#keys[@]};i++))
		do
			#: if this is a new subsection, then echo section heading from array
			if [[ $buf != ${subs[$i]} ]]
			then
				buf=${subs[$i]} #: store the subsection in buf
				#: switchin lights on adds the light program spacer
				if ! [[ $buf = "_light" && $USELIGHTS = "off" ]]
				then
					spacer isub
					((isub++))
				else
					break
				fi
			fi
			printf "%29s" "${blurbs[$i]} ["
			echo -e "${Cyan}${keys[$i]}${NC}] \c"
			echo -e "${cols[$i]}\c"

			#: determine offset spacing for light color marker

			arg=${!args[$i]}
			arglen=${#arg}
			push=$(($margin-arglen))

			#: display plate settings
			if [[ ${keys[$i]} = "p" && $USELIGHTS = "on" ]]
			then
				lp=${!largs[$dindex]} #:light program setting as string
				((dindex++))
			else
				lp=""
			fi
			# echo -n $arg $lp
			#: eliminate the plate setup columns by stopping push below; consolidate to one value

			printf "%1s %${push}s" "$arg" "$lp"
			echo -e ${NC}
			if [[ $USELIGHTS = "on" ]] #: considering a column for light display
			then
				### work
				# column "on"
				# printf "%10s" "on"
				# echo
				a=a
			fi
		done

		#: add menu subsection at last position
		echo
		echo -e "${BPurple}`printf '=%.0s' {1..31}`${NC}"
		for ((i=0;i<${#mkeys[@]};i++))
		do
			printf "%29s" "${mblurbs[$i]} ["
			echo -e ${UCyan}${mkeys[$i]}${NC}"]"
		done

		echo -e "\n"
		printf "%27s" "set new parameters with ["
		echo -e "${BCyan}${Italic}key${NC}]"
		printf "%29s" "set ALL with ["
		echo -e "${BCyan}~${NC}] >\c"

##. USER INPUT
		lj=0 #: reset this value
		read -n 1 key
		echo
		if [[ $key = '~' ]] #: enter key runs cronit function, then exits
		then
			set_all
		fi

		for ((i=0;i<${#mkeys[@]};i++)) #: find all instances of the hotkey in menuset
		do
			if [[ ${mkeys[$i]} = $key ]]
			then
				menukeys #: send the index of the key from allowable options to process
			fi
		done
		for ((i=0;i<${#keys[@]};i++)) #: find all instances of the hotkey
		do
			#echo i=$i, for lKeys loop #-- TRACER
			if [[ ${keys[$i]} = $key ]] #- || ${keys[$i]} = "${key^}" ]]
			then
				eatkeys #: send the index of the key from allowable options to process
			fi
		done

	# sleep 1 #-- TRACER
	done #: END WHILE stay_TF LOOP
} #......................................... end main

firstrun=0
init_colors
load_parms
update ${keys[1]} #: send scanner count hotkey to populate statrup plate args
#update ${keys[6]} #: now for lights, if on
storelongest
main "$@"
